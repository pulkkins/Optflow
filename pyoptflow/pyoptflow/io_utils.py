"""Methods for reading and writing motion vector fields from/into different 
file formats. The currently implemented methods are for dense vector fields 
(i.e. motion vectors are computed for each pixel)."""

from collections import defaultdict
from datetime import datetime
try:
  import h5py
  h5py_imported = True
except ImportError:
  h5py_imported = False
from numpy import array, float32, inf, isfinite, nan, size, zeros

def read_ODIM_HDF5(filename):
  """Read a motion vector field from an ODIM HDF5 file (a file format for 
  weather radar data).
  
  Parameters
  ----------
  filename : str
    Name of the file to read from. The file must be in the ODIM HDF5 format 
    (the same as for files generated by write_ODIM_HDF5).
  
  Returns
  -------
  out : ndarray
    A motion vector field that is a three-dimensional array containing u- and 
    v-components and n quality channels.
  """
  if not h5py_imported:
    raise Exception("h5py not found, please check your installation")
  
  h5file = h5py.File(filename, 'r')
  
  V = None
  
  grp_dataset = h5file["dataset1"]
  num_channels = 0
  for dgn in grp_dataset.keys():
    if dgn[0:4] == "data":
      num_channels += 1
  print(num_channels)
  for dgn in grp_dataset.keys():
    if dgn[0:4] == "data":
      grp_data = grp_dataset[dgn]
      qty = grp_data["what"].attrs["quantity"]
      V_ = grp_data["data"][...]
      if V is None:
        V = zeros((V_.shape[0], V_.shape[1], num_channels))
      if qty == "AMVU":
        V[:, :, 0] = V_
      elif qty == "AMVV":
        V[:, :, 1] = V_
      else:
        V[:, :, 1+int(qty[14:])] = V_
  
  h5file.close()
  
  return V

def write_ODIM_HDF5(V, filename, ignore_missing_attrs=False, 
                    write_as_image=False, **kwargs):
  """Write a motion vector field into an ODIM HDF5 file (a file format for 
  weather radar data). The motion field is assumed to be in map coordinates 
  obtained from a cartographic projection.
  
  Parameters
  ----------
  V : array-like
    The motion vector field.
  kwargs : dict
    Attributes that are written to the HDF5 file. The keyword arguments should 
    contain the following key-value pairs:\n
    \n
    projdef : str\n
      Proj4-compatible projection definition.\n
    xscale : float\n
      Width of each grid pixel (meters).\n
    yscale : float\n
      Height of each grid pixel (meters).\n
    LL_lon : float\n
      Longitude of the lower left grid corner.\n
    LL_lat : float\n
      Latitude of the lower left grid corner.\n
    UR_lon : float\n
      Longitude of the upper right grid corner.\n
    UR_lat : float\n
      Latitude of the upper right grid corner.\n
    date : datetime\n
      Nominal date for the motion field.\n
    source : str\n
      ODIM-compatible string that identifies the used radar(s).
  ignore_missing_args : bool
    If True, missing kwargs are ignored. Otherwise, an exception is raised if 
    any keyword argument is missing.
  write_as_image : bool
    If True, add image attributes to the written HDF5 datasets. When these 
    attributes are set, the datasets can be quickly viewed as images in hdfview.
  """
  if not h5py_imported:
    raise Exception("h5py not found, please check your installation")
  
  kwargs = defaultdict(lambda:"none", kwargs)
  missing_attrs = []
  
  h5file = h5py.File(filename, 'w')
  
  grp_where = h5file.create_group("where")
  
  _set_attr(grp_where, "projdef", kwargs, str, missing_attrs)
  grp_where.attrs["xsize"] = long(size(V, 1))
  grp_where.attrs["ysize"] = long(size(V, 0))
  _set_attr(grp_where, "xscale", kwargs, float, missing_attrs)
  _set_attr(grp_where, "yscale", kwargs, float, missing_attrs)
  _set_attr(grp_where, "LL_lon", kwargs, float, missing_attrs)
  _set_attr(grp_where, "LL_lat", kwargs, float, missing_attrs)
  _set_attr(grp_where, "UL_lon", kwargs, float, missing_attrs)
  _set_attr(grp_where, "UL_lat", kwargs, float, missing_attrs)
  _set_attr(grp_where, "UR_lon", kwargs, float, missing_attrs)
  _set_attr(grp_where, "UR_lat", kwargs, float, missing_attrs)
  _set_attr(grp_where, "LR_lon", kwargs, float, missing_attrs)
  _set_attr(grp_where, "LR_lat", kwargs, float, missing_attrs)
  
  grp_what = h5file.create_group("what")
  
  grp_what.attrs["object"] = "AMV"
  grp_what.attrs["version"] = "H5rad 2.2"
  _set_attr(grp_what, "date", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%Y%m%d"))
  _set_attr(grp_what, "time", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%H%M%S"), 
            attr_conv=lambda x:"date")
  _set_attr(grp_what, "source", kwargs, str, missing_attrs)
  
  grp_how = h5file.create_group("how")
  
  _set_attr(grp_how, "angles", kwargs, array, missing_attrs, 
            func=lambda x:[float(v) for v in x])
  _set_attr(grp_how, "camethod", kwargs, str, missing_attrs)
  
  if ignore_missing_attrs == False and len(missing_attrs) > 0:
    h5file.close()
    raise KeyError("attribute '%s' not supplied in kwargs" % missing_attrs[0])
  
  grp_dataset = h5file.create_group("dataset1")
  
  grp_what = grp_dataset.create_group("what")
  grp_what.attrs["product"] = "AMV"
  _set_attr(grp_what, "prodpar", kwargs, str, missing_attrs)
  _set_attr(grp_what, "startdate", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%Y%m%d"))
  _set_attr(grp_what, "starttime", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%H%M%S"), 
            attr_conv=lambda x:"startdate")
  _set_attr(grp_what, "enddate", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%Y%m%d"))
  _set_attr(grp_what, "endtime", kwargs, str, missing_attrs, 
            func=lambda x:datetime.strftime(x, "%H%M%S"), 
            attr_conv=lambda x:"enddate")
  
  grp_data1 = grp_dataset.create_group("data1")
  dataset = grp_data1.create_dataset("data", data=V[:, :, 0], compression=9)
  if write_as_image == True:
    _set_image_attrs(dataset, V[:, :, 0])
  grp_what  = grp_data1.create_group("what")
  grp_what.attrs["gain"]     = 1.0
  grp_what.attrs["nodata"]   = nan
  grp_what.attrs["offset"]   = 0.0
  grp_what.attrs["quantity"] = "AMVU"
  grp_what.attrs["undetect"] = -inf
  
  grp_data2 = grp_dataset.create_group("data2")
  dataset = grp_data2.create_dataset("data", data=V[:, :, 1], compression=9)
  if write_as_image == True:
    _set_image_attrs(dataset, V[:, :, 1])
  grp_what  = grp_data2.create_group("what")
  grp_what.attrs["gain"]     = 1.0
  grp_what.attrs["nodata"]   = nan
  grp_what.attrs["offset"]   = 0.0
  grp_what.attrs["quantity"] = "AMVV"
  grp_what.attrs["undetect"] = -inf
  
  for i in range(V.shape[2]-2):
    grp_dataq = grp_dataset.create_group("data%d" % (3+i))
    dataset = grp_dataq.create_dataset("data", data=V[:, :, 2+i], compression=9)
    if write_as_image == True:
      _set_image_attrs(dataset, V[:, :, 2+i])
    grp_what = grp_dataq.create_group("what")
    grp_what.attrs["gain"]     = 1.0
    grp_what.attrs["nodata"]   = nan
    grp_what.attrs["offset"]   = 0.0
    grp_what.attrs["quantity"] = "QIND%d" % (i+1)
    grp_what.attrs["undetect"] = -inf
  
  h5file.close()

def _set_attr(grp, attr, attr_dict, tp, missing_attrs, func=lambda x:x, 
              attr_conv=lambda x:x):
  if attr_dict.has_key(attr_conv(attr)):
    grp.attrs[attr] = tp(func(attr_dict[attr_conv(attr)]))
  else:
    missing_attrs.append(attr)

def _set_image_attrs(dataset, I):
  dataset.attrs["CLASS"]         = array("IMAGE", dtype="S6")
  dataset.attrs["IMAGE_VERSION"] = array("1.2",   dtype="S4")
  MASK = isfinite(I)
  minval,maxval = min(I[MASK]),max(I[MASK])
  dataset.attrs["IMAGE_SUBCLASS"]    = array("IMAGE_TRUECOLOR", dtype="S16")
  dataset.attrs["IMAGE_MINMAXRANGE"] = array((minval, maxval)).astype(float32)
